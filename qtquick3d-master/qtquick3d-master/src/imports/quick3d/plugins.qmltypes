import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtQuick3D 1.0'

Module {
    dependencies: ["QtQuick 2.12"]
    Component {
        name: "QQuick3DCamera"
        defaultProperty: "data"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Camera 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QSSGCameraScaleModes"
            values: {
                "Fit": 0,
                "SameSize": 1,
                "FitHorizontal": 2,
                "FitVertical": 3
            }
        }
        Enum {
            name: "QSSGCameraScaleAnchors"
            values: {
                "Center": 0,
                "North": 1,
                "NorthEast": 2,
                "East": 3,
                "SouthEast": 4,
                "South": 5,
                "SouthWest": 6,
                "West": 7,
                "NorthWest": 8
            }
        }
        Enum {
            name: "QSSGCameraProjectionMode"
            values: {
                "Perspective": 0,
                "Orthographic": 1,
                "Frustum": 2,
                "Custom": 3
            }
        }
        Property { name: "clipNear"; type: "float" }
        Property { name: "clipFar"; type: "float" }
        Property { name: "fieldOfView"; type: "float" }
        Property { name: "isFieldOfViewHorizontal"; type: "bool" }
        Property { name: "projectionMode"; type: "QSSGCameraProjectionMode" }
        Property { name: "enableFrustumCulling"; type: "bool" }
        Property { name: "frustumTop"; type: "float" }
        Property { name: "frustumBottom"; type: "float" }
        Property { name: "frustumRight"; type: "float" }
        Property { name: "frustumLeft"; type: "float" }
        Property { name: "customProjection"; type: "QMatrix4x4" }
        Signal {
            name: "clipNearChanged"
            Parameter { name: "clipNear"; type: "float" }
        }
        Signal {
            name: "clipFarChanged"
            Parameter { name: "clipFar"; type: "float" }
        }
        Signal {
            name: "fieldOfViewChanged"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Signal {
            name: "isFieldOfViewHorizontalChanged"
            Parameter { name: "isFieldOfViewHorizontal"; type: "bool" }
        }
        Signal {
            name: "projectionModeChanged"
            Parameter { name: "projectionMode"; type: "QSSGCameraProjectionMode" }
        }
        Signal {
            name: "enableFrustumCullingChanged"
            Parameter { name: "enableFrustumCulling"; type: "bool" }
        }
        Signal {
            name: "frustumTopChanged"
            Parameter { name: "frustumTop"; type: "float" }
        }
        Signal {
            name: "frustumBottomChanged"
            Parameter { name: "frustumBottom"; type: "float" }
        }
        Signal {
            name: "frustumRightChanged"
            Parameter { name: "frustumRight"; type: "float" }
        }
        Signal {
            name: "frustumLeftChanged"
            Parameter { name: "frustumLeft"; type: "float" }
        }
        Signal {
            name: "customProjectionChanged"
            Parameter { name: "customProjection"; type: "QMatrix4x4" }
        }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setFieldOfView"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Method {
            name: "setIsFieldOfViewHorizontal"
            Parameter { name: "isFieldOFViewHorizontal"; type: "bool" }
        }
        Method {
            name: "setProjectionMode"
            Parameter { name: "projectionMode"; type: "QSSGCameraProjectionMode" }
        }
        Method {
            name: "setEnableFrustumCulling"
            Parameter { name: "enableFrustumCulling"; type: "bool" }
        }
        Method {
            name: "setFrustumTop"
            Parameter { name: "frustumTop"; type: "float" }
        }
        Method {
            name: "setFrustumBottom"
            Parameter { name: "frustumBottom"; type: "float" }
        }
        Method {
            name: "setFrustumRight"
            Parameter { name: "frustumRight"; type: "float" }
        }
        Method {
            name: "setFrustumLeft"
            Parameter { name: "frustumLeft"; type: "float" }
        }
        Method {
            name: "setCustomProjection"
            Parameter { name: "customProjection"; type: "QMatrix4x4" }
        }
        Method {
            name: "worldToViewport"
            type: "QVector3D"
            Parameter { name: "worldPos"; type: "QVector3D" }
        }
        Method {
            name: "viewportToWorld"
            type: "QVector3D"
            Parameter { name: "viewportPos"; type: "QVector3D" }
        }
    }
    Component {
        name: "QQuick3DCustomMaterial"
        defaultProperty: "data"
        prototype: "QQuick3DMaterial"
        exports: ["QtQuick3D/CustomMaterial 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "hasTransparency"; type: "bool" }
        Property { name: "hasRefraction"; type: "bool" }
        Property { name: "hasVolumetricDF"; type: "bool" }
        Property { name: "alwaysDirty"; type: "bool" }
        Property { name: "shaderInfo"; type: "QQuick3DCustomMaterialShaderInfo"; isPointer: true }
        Property {
            name: "passes"
            type: "QQuick3DCustomMaterialRenderPass"
            isList: true
            isReadonly: true
        }
        Signal {
            name: "hasTransparencyChanged"
            Parameter { name: "hasTransparency"; type: "bool" }
        }
        Signal {
            name: "hasRefractionChanged"
            Parameter { name: "hasRefraction"; type: "bool" }
        }
        Signal {
            name: "hasVolumetricDFChanged"
            Parameter { name: "hasVolumetricDF"; type: "bool" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Signal {
            name: "alwaysDirtyChanged"
            Parameter { name: "alwaysDirty"; type: "bool" }
        }
        Method {
            name: "setHasTransparency"
            Parameter { name: "hasTransparency"; type: "bool" }
        }
        Method {
            name: "setHasRefraction"
            Parameter { name: "hasRefraction"; type: "bool" }
        }
        Method {
            name: "setHasVolumetricDF"
            Parameter { name: "hasVolumetricDF"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setShaderInfo"
            Parameter { name: "shaderInfo"; type: "QQuick3DCustomMaterialShaderInfo"; isPointer: true }
        }
        Method {
            name: "setAlwaysDirty"
            Parameter { name: "alwaysDirty"; type: "bool" }
        }
    }
    Component {
        name: "QQuick3DCustomMaterialBlending"
        prototype: "QQuick3DCustomMaterialRenderCommand"
        exports: ["QtQuick3D/CustomMaterialBlending 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SrcBlending"
            values: {
                "Unknown": 0,
                "Zero": 1,
                "One": 2,
                "SrcColor": 3,
                "OneMinusSrcColor": 4,
                "DstColor": 5,
                "OneMinusDstColor": 6,
                "SrcAlpha": 7,
                "OneMinusSrcAlpha": 8,
                "DstAlpha": 9,
                "OneMinusDstAlpha": 10,
                "ConstantColor": 11,
                "OneMinusConstantColor": 12,
                "ConstantAlpha": 13,
                "OneMinusConstantAlpha": 14,
                "SrcAlphaSaturate": 15
            }
        }
        Enum {
            name: "DestBlending"
            values: {
                "Unknown": 0,
                "Zero": 1,
                "One": 2,
                "SrcColor": 3,
                "OneMinusSrcColor": 4,
                "DstColor": 5,
                "OneMinusDstColor": 6,
                "SrcAlpha": 7,
                "OneMinusSrcAlpha": 8,
                "DstAlpha": 9,
                "OneMinusDstAlpha": 10,
                "ConstantColor": 11,
                "OneMinusConstantColor": 12,
                "ConstantAlpha": 13,
                "OneMinusConstantAlpha": 14
            }
        }
        Property { name: "srcBlending"; type: "SrcBlending" }
        Property { name: "destBlending"; type: "DestBlending" }
        Method {
            name: "setDestBlending"
            Parameter { name: "destBlending"; type: "DestBlending" }
        }
        Method {
            name: "setSrcBlending"
            Parameter { name: "srcBlending"; type: "SrcBlending" }
        }
    }
    Component {
        name: "QQuick3DCustomMaterialBuffer"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialBuffer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "FrameBuffer": 0,
                "UserDefined": 1
            }
        }
        Enum {
            name: "MagnifyingOp"
            values: {
                "Unknown": 0,
                "Nearest": 1,
                "Linear": 2
            }
        }
        Enum {
            name: "TextureCoordOp"
            values: {
                "Unknown": 0,
                "ClampToEdge": 1,
                "MirroredRepeat": 2,
                "Repeat": 3
            }
        }
        Enum {
            name: "AllocateBufferFlagValues"
            values: {
                "None": 0,
                "SceneLifetime": 1
            }
        }
        Enum {
            name: "TextureFormat"
            values: {
                "Unknown": 0,
                "R8": 1,
                "R16": 2,
                "R16F": 3,
                "R32I": 4,
                "R32UI": 5,
                "R32F": 6,
                "RG8": 7,
                "RGBA8": 8,
                "RGB8": 9,
                "SRGB8": 10,
                "SRGB8A8": 11,
                "RGB565": 12,
                "RGBA5551": 13,
                "Alpha8": 14,
                "Luminance8": 15,
                "Luminance16": 16,
                "LuminanceAlpha8": 17,
                "RGBA16F": 18,
                "RG16F": 19,
                "RG32F": 20,
                "RGB32F": 21,
                "RGBA32F": 22,
                "R11G11B10": 23,
                "RGB9E5": 24,
                "RGBA_DXT1": 25,
                "RGB_DXT1": 26,
                "RGBA_DXT3": 27,
                "RGBA_DXT5": 28,
                "Depth16": 29,
                "Depth24": 30,
                "Depth32": 31,
                "Depth24Stencil8": 32
            }
        }
        Property { name: "format"; type: "TextureFormat" }
        Property { name: "magOp"; type: "MagnifyingOp" }
        Property { name: "coordOp"; type: "TextureCoordOp" }
        Property { name: "sizeMultiplier"; type: "float" }
        Property { name: "bufferFlags"; type: "AllocateBufferFlagValues" }
        Property { name: "name"; type: "QByteArray" }
    }
    Component {
        name: "QQuick3DCustomMaterialBufferBlit"
        prototype: "QQuick3DCustomMaterialRenderCommand"
        exports: ["QtQuick3D/CustomMaterialBufferBlit 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QQuick3DCustomMaterialBuffer"; isPointer: true }
        Property { name: "destination"; type: "QQuick3DCustomMaterialBuffer"; isPointer: true }
    }
    Component {
        name: "QQuick3DCustomMaterialBufferInput"
        prototype: "QQuick3DCustomMaterialRenderCommand"
        exports: ["QtQuick3D/CustomMaterialBufferInput 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "buffer"; type: "QQuick3DCustomMaterialBuffer"; isPointer: true }
        Property { name: "param"; type: "QByteArray" }
    }
    Component {
        name: "QQuick3DCustomMaterialRenderCommand"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialCommand 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QQuick3DCustomMaterialRenderPass"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialPass 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "commands"
            type: "QQuick3DCustomMaterialRenderCommand"
            isList: true
            isReadonly: true
        }
        Property { name: "output"; type: "QQuick3DCustomMaterialBuffer"; isPointer: true }
        Property { name: "shaders"; type: "QQuick3DCustomMaterialShader"; isList: true; isReadonly: true }
    }
    Component {
        name: "QQuick3DCustomMaterialRenderState"
        prototype: "QQuick3DCustomMaterialRenderCommand"
        exports: ["QtQuick3D/CustomMaterialRenderState 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RenderState"
            values: {
                "Unknown": 0,
                "Blend": 1,
                "CullFace": 2,
                "DepthTest": 3,
                "StencilTest": 4,
                "ScissorTest": 5,
                "DepthWrite": 6,
                "Multisample": 7
            }
        }
        Property { name: "renderState"; type: "RenderState" }
        Property { name: "enabled"; type: "bool" }
        Method {
            name: "setRenderState"
            Parameter { name: "renderState"; type: "RenderState" }
        }
    }
    Component {
        name: "QQuick3DCustomMaterialShader"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialShader 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Stage"
            values: {
                "Shared": 0,
                "Vertex": 1,
                "Fragment": 2,
                "Geometry": 3,
                "Compute": 4
            }
        }
        Property { name: "shader"; type: "QByteArray" }
        Property { name: "stage"; type: "Stage" }
    }
    Component {
        name: "QQuick3DCustomMaterialShaderInfo"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialShaderInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MaterialShaderKeyValues"
            values: {
                "Diffuse": 1,
                "Specular": 2,
                "Glossy": 4,
                "Cutout": 8,
                "Refraction": 16,
                "Transparent": 32,
                "Displace": 64,
                "Volumetric": 128,
                "Transmissive": 256
            }
        }
        Property { name: "version"; type: "QByteArray" }
        Property { name: "type"; type: "QByteArray" }
        Property { name: "shaderKey"; type: "int" }
        Property { name: "layers"; type: "int" }
    }
    Component {
        name: "QQuick3DCustomMaterialTexture"
        prototype: "QObject"
        exports: ["QtQuick3D/CustomMaterialTexture 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TextureType"
            values: {
                "Unknown": 0,
                "Diffuse": 1,
                "Specular": 2,
                "Environment": 3,
                "Bump": 4,
                "Normal": 5,
                "Displace": 6,
                "Emissive": 7,
                "Emissive2": 8,
                "Anisotropy": 9,
                "Translucent": 10,
                "LightmapIndirect": 11,
                "LightmapRadiosity": 12,
                "LightmapShadow": 13
            }
        }
        Property { name: "image"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "type"; type: "TextureType" }
        Property { name: "enabled"; type: "bool" }
        Signal {
            name: "textureDirty"
            Parameter { name: "texture"; type: "QQuick3DCustomMaterialTexture"; isPointer: true }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "QQuick3DTexture"; isPointer: true }
        }
    }
    Component {
        name: "QQuick3DDefaultMaterial"
        defaultProperty: "data"
        prototype: "QQuick3DMaterial"
        exports: ["QtQuick3D/DefaultMaterial 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QSSGDefaultMaterialLighting"
            values: {
                "NoLighting": 0,
                "VertexLighting": 1,
                "FragmentLighting": 2
            }
        }
        Enum {
            name: "QSSGDefaultMaterialBlendMode"
            values: {
                "Normal": 0,
                "Screen": 1,
                "Multiply": 2,
                "Overlay": 3,
                "ColorBurn": 4,
                "ColorDodge": 5
            }
        }
        Enum {
            name: "QSSGDefaultMaterialSpecularModel"
            values: {
                "Default": 0,
                "KGGX": 1,
                "KWard": 2
            }
        }
        Property { name: "lighting"; type: "QSSGDefaultMaterialLighting" }
        Property { name: "blendMode"; type: "QSSGDefaultMaterialBlendMode" }
        Property { name: "diffuseColor"; type: "QColor" }
        Property { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "diffuseMap2"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "diffuseMap3"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "emissivePower"; type: "float" }
        Property { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "emissiveColor"; type: "QColor" }
        Property { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "specularModel"; type: "QSSGDefaultMaterialSpecularModel" }
        Property { name: "specularTint"; type: "QColor" }
        Property { name: "indexOfRefraction"; type: "float" }
        Property { name: "fresnelPower"; type: "float" }
        Property { name: "specularAmount"; type: "float" }
        Property { name: "specularRoughness"; type: "float" }
        Property { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "opacity"; type: "float" }
        Property { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "bumpAmount"; type: "float" }
        Property { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "translucentFalloff"; type: "float" }
        Property { name: "diffuseLightWrap"; type: "float" }
        Property { name: "vertexColors"; type: "bool" }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "QSSGDefaultMaterialLighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "QSSGDefaultMaterialBlendMode" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "diffuseMap2Changed"
            Parameter { name: "diffuseMap2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "diffuseMap3Changed"
            Parameter { name: "diffuseMap3"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissivePowerChanged"
            Parameter { name: "emissivePower"; type: "float" }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveColorChanged"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularModelChanged"
            Parameter { name: "specularModel"; type: "QSSGDefaultMaterialSpecularModel" }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Signal {
            name: "indexOfRefractionChanged"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Signal {
            name: "fresnelPowerChanged"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "specularRoughnessChanged"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpMapChanged"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpAmountChanged"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucencyMapChanged"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucentFalloffChanged"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Signal {
            name: "diffuseLightWrapChanged"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Signal {
            name: "vertexColorsChanged"
            Parameter { name: "vertexColors"; type: "bool" }
        }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "QSSGDefaultMaterialLighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "QSSGDefaultMaterialBlendMode" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setDiffuseMap2"
            Parameter { name: "diffuseMap2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setDiffuseMap3"
            Parameter { name: "diffuseMap3"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissivePower"
            Parameter { name: "emissivePower"; type: "float" }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveColor"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularModel"
            Parameter { name: "specularModel"; type: "QSSGDefaultMaterialSpecularModel" }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Method {
            name: "setIndexOfRefraction"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Method {
            name: "setFresnelPower"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setSpecularRoughness"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpMap"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpAmount"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucencyMap"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucentFalloff"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Method {
            name: "setDiffuseLightWrap"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Method {
            name: "setVertexColors"
            Parameter { name: "vertexColors"; type: "bool" }
        }
    }
    Component {
        name: "QQuick3DEffect"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Effect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
    }
    Component {
        name: "QQuick3DLight"
        defaultProperty: "data"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Light 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QSSGRenderLightTypes"
            values: {
                "Unknown": 0,
                "Directional": 1,
                "Point": 2,
                "Area": 3
            }
        }
        Property { name: "lightType"; type: "QSSGRenderLightTypes" }
        Property { name: "diffuseColor"; type: "QColor" }
        Property { name: "specularColor"; type: "QColor" }
        Property { name: "ambientColor"; type: "QColor" }
        Property { name: "brightness"; type: "float" }
        Property { name: "linearFade"; type: "float" }
        Property { name: "exponentialFade"; type: "float" }
        Property { name: "areaWidth"; type: "float" }
        Property { name: "areaHeight"; type: "float" }
        Property { name: "castShadow"; type: "bool" }
        Property { name: "shadowBias"; type: "float" }
        Property { name: "shadowFactor"; type: "float" }
        Property { name: "shadowMapResolution"; type: "int" }
        Property { name: "shadowMapFar"; type: "float" }
        Property { name: "shadowMapFieldOfView"; type: "float" }
        Property { name: "shadowFilter"; type: "float" }
        Property { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        Signal {
            name: "lightTypeChanged"
            Parameter { name: "lightType"; type: "QSSGRenderLightTypes" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "specularColorChanged"
            Parameter { name: "specularColor"; type: "QColor" }
        }
        Signal {
            name: "ambientColorChanged"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Signal {
            name: "brightnessChanged"
            Parameter { name: "brightness"; type: "float" }
        }
        Signal {
            name: "linearFadeChanged"
            Parameter { name: "linearFade"; type: "float" }
        }
        Signal {
            name: "exponentialFadeChanged"
            Parameter { name: "exponentialFade"; type: "float" }
        }
        Signal {
            name: "areaWidthChanged"
            Parameter { name: "areaWidth"; type: "float" }
        }
        Signal {
            name: "areaHeightChanged"
            Parameter { name: "areaHeight"; type: "float" }
        }
        Signal {
            name: "castShadowChanged"
            Parameter { name: "castShadow"; type: "bool" }
        }
        Signal {
            name: "shadowBiasChanged"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Signal {
            name: "shadowFactorChanged"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Signal {
            name: "shadowMapResolutionChanged"
            Parameter { name: "shadowMapResolution"; type: "int" }
        }
        Signal {
            name: "shadowMapFarChanged"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Signal {
            name: "shadowMapFieldOfViewChanged"
            Parameter { name: "shadowMapFieldOfView"; type: "float" }
        }
        Signal {
            name: "shadowFilterChanged"
            Parameter { name: "shadowFilter"; type: "float" }
        }
        Signal {
            name: "scopeChanged"
            Parameter { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setLightType"
            Parameter { name: "lightType"; type: "QSSGRenderLightTypes" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularColor"
            Parameter { name: "specularColor"; type: "QColor" }
        }
        Method {
            name: "setAmbientColor"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Method {
            name: "setBrightness"
            Parameter { name: "brightness"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setExponentialFade"
            Parameter { name: "exponentialFade"; type: "float" }
        }
        Method {
            name: "setAreaWidth"
            Parameter { name: "areaWidth"; type: "float" }
        }
        Method {
            name: "setAreaHeight"
            Parameter { name: "areaHeight"; type: "float" }
        }
        Method {
            name: "setCastShadow"
            Parameter { name: "castShadow"; type: "bool" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setShadowFactor"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Method {
            name: "setShadowMapResolution"
            Parameter { name: "shadowMapResolution"; type: "int" }
        }
        Method {
            name: "setShadowMapFar"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Method {
            name: "setShadowMapFieldOfView"
            Parameter { name: "shadowMapFieldOfView"; type: "float" }
        }
        Method {
            name: "setShadowFilter"
            Parameter { name: "shadowFilter"; type: "float" }
        }
        Method {
            name: "setScope"
            Parameter { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        }
    }
    Component {
        name: "QQuick3DMaterial"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Material 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "iblProbe"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "emissiveMap2"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "displacementMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "displacementAmount"; type: "float" }
        Signal {
            name: "lightmapIndirectChanged"
            Parameter { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "lightmapRadiosityChanged"
            Parameter { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "lightmapShadowChanged"
            Parameter { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "iblProbeChanged"
            Parameter { name: "iblProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveMap2Changed"
            Parameter { name: "emissiveMap2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "displacementMapChanged"
            Parameter { name: "displacementMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "displacementAmountChanged"
            Parameter { name: "displacementAmount"; type: "float" }
        }
        Method {
            name: "setLightmapIndirect"
            Parameter { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setLightmapRadiosity"
            Parameter { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setLightmapShadow"
            Parameter { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setIblProbe"
            Parameter { name: "iblProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveMap2"
            Parameter { name: "emissiveMap2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setDisplacementMap"
            Parameter { name: "displacementMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setDisplacementAmount"
            Parameter { name: "displacementAmount"; type: "float" }
        }
    }
    Component {
        name: "QQuick3DModel"
        defaultProperty: "data"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Model 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QSSGTessModeValues"
            values: {
                "NoTess": 0,
                "TessLinear": 1,
                "TessPhong": 2,
                "TessNPatch": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "skeletonRoot"; type: "int" }
        Property { name: "tesselationMode"; type: "QSSGTessModeValues" }
        Property { name: "edgeTess"; type: "float" }
        Property { name: "innerTess"; type: "float" }
        Property { name: "isWireframeMode"; type: "bool" }
        Property { name: "castsShadows"; type: "bool" }
        Property { name: "receivesShadows"; type: "bool" }
        Property { name: "materials"; type: "QQuick3DMaterial"; isList: true; isReadonly: true }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "skeletonRootChanged"
            Parameter { name: "skeletonRoot"; type: "int" }
        }
        Signal {
            name: "tesselationModeChanged"
            Parameter { name: "tesselationMode"; type: "QSSGTessModeValues" }
        }
        Signal {
            name: "edgeTessChanged"
            Parameter { name: "edgeTess"; type: "float" }
        }
        Signal {
            name: "innerTessChanged"
            Parameter { name: "innerTess"; type: "float" }
        }
        Signal {
            name: "isWireframeModeChanged"
            Parameter { name: "isWireframeMode"; type: "bool" }
        }
        Signal {
            name: "castsShadowsChanged"
            Parameter { name: "castsShadows"; type: "bool" }
        }
        Signal {
            name: "receivesShadowsChanged"
            Parameter { name: "receivesShadows"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSkeletonRoot"
            Parameter { name: "skeletonRoot"; type: "int" }
        }
        Method {
            name: "setTesselationMode"
            Parameter { name: "tesselationMode"; type: "QSSGTessModeValues" }
        }
        Method {
            name: "setEdgeTess"
            Parameter { name: "edgeTess"; type: "float" }
        }
        Method {
            name: "setInnerTess"
            Parameter { name: "innerTess"; type: "float" }
        }
        Method {
            name: "setIsWireframeMode"
            Parameter { name: "isWireframeMode"; type: "bool" }
        }
        Method {
            name: "setCastsShadows"
            Parameter { name: "castsShadows"; type: "bool" }
        }
        Method {
            name: "setReceivesShadows"
            Parameter { name: "receivesShadows"; type: "bool" }
        }
    }
    Component {
        name: "QQuick3DNode"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Node 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RotationOrder"
            values: {
                "XYZ": 0,
                "YZX": 8,
                "ZXY": 16,
                "XZY": 4,
                "YXZ": 12,
                "ZYX": 20,
                "XYZr": 21,
                "YZXr": 5,
                "ZXYr": 13,
                "XZYr": 9,
                "YXZr": 17,
                "ZYXr": 1
            }
        }
        Enum {
            name: "Orientation"
            values: {
                "LeftHanded": 0,
                "RightHanded": 1
            }
        }
        Property { name: "x"; type: "float" }
        Property { name: "y"; type: "float" }
        Property { name: "z"; type: "float" }
        Property { name: "rotation"; type: "QVector3D" }
        Property { name: "position"; type: "QVector3D" }
        Property { name: "scale"; type: "QVector3D" }
        Property { name: "pivot"; type: "QVector3D" }
        Property { name: "opacity"; type: "float" }
        Property { name: "boneId"; type: "int" }
        Property { name: "rotationOrder"; type: "RotationOrder" }
        Property { name: "orientation"; type: "Orientation" }
        Property { name: "visible"; type: "bool" }
        Property { name: "forward"; type: "QVector3D"; isReadonly: true }
        Property { name: "up"; type: "QVector3D"; isReadonly: true }
        Property { name: "right"; type: "QVector3D"; isReadonly: true }
        Property { name: "globalPosition"; type: "QVector3D"; isReadonly: true }
        Property { name: "globalTransform"; type: "QMatrix4x4"; isReadonly: true }
        Signal {
            name: "xChanged"
            Parameter { name: "x"; type: "float" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "y"; type: "float" }
        }
        Signal {
            name: "zChanged"
            Parameter { name: "z"; type: "float" }
        }
        Signal {
            name: "rotationChanged"
            Parameter { name: "rotation"; type: "QVector3D" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Signal {
            name: "scaleChanged"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Signal {
            name: "pivotChanged"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Signal {
            name: "localOpacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "skeletonIdChanged"
            Parameter { name: "boneid"; type: "int" }
        }
        Signal {
            name: "rotationOrderChanged"
            Parameter { name: "rotationorder"; type: "RotationOrder" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "Orientation" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "globalTransformChanged"
            Parameter { name: "transform"; type: "QMatrix4x4" }
        }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "float" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "setRotation"
            Parameter { name: "rotation"; type: "QVector3D" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setPivot"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Method {
            name: "setLocalOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setSkeletonId"
            Parameter { name: "boneid"; type: "int" }
        }
        Method {
            name: "setRotationOrder"
            Parameter { name: "rotationorder"; type: "RotationOrder" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "Orientation" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
    }
    Component {
        name: "QQuick3DObject"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QtQuick3D/Object3D 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Unknown": 0,
                "SceneEnvironment": 1,
                "Node": 2,
                "Layer": 3,
                "Light": 4,
                "Camera": 5,
                "Model": 6,
                "DefaultMaterial": 7,
                "Image": 8,
                "Text": 9,
                "Effect": 10,
                "CustomMaterial": 11,
                "RenderPlugin": 12,
                "ReferencedMaterial": 13,
                "Path": 14,
                "PathSubPath": 15,
                "Lightmaps": 16,
                "LastKnownGraphObjectType": 17
            }
        }
        Property { name: "parent"; type: "QQuick3DObject"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuick3DObject"; isList: true; isReadonly: true }
        Property { name: "type"; type: "QQuick3DObject::Type"; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Signal {
            name: "sceneRendererChanged"
            Parameter { name: "sceneRenderer"; type: "QQuick3DSceneManager"; isPointer: true }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "parent"; type: "QQuick3DObject"; isPointer: true }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Method { name: "update" }
        Method {
            name: "setParentItem"
            Parameter { name: "parentItem"; type: "QQuick3DObject"; isPointer: true }
        }
    }
    Component {
        name: "QQuick3DSceneEnvironment"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/SceneEnvironment 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QQuick3DEnvironmentAAModeValues"
            values: {
                "NoAA": 0,
                "SSAA": 1,
                "X2": 2,
                "X4": 4,
                "X8": 8
            }
        }
        Enum {
            name: "QQuick3DEnvironmentBackgroundTypes"
            values: {
                "Transparent": 0,
                "Unspecified": 1,
                "Color": 2,
                "SkyBox": 3
            }
        }
        Property { name: "effects"; type: "QQuick3DEffect"; isList: true; isReadonly: true }
        Property { name: "progressiveAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        Property { name: "multisampleAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        Property { name: "temporalAAEnabled"; type: "bool" }
        Property { name: "backgroundMode"; type: "QQuick3DEnvironmentBackgroundTypes" }
        Property { name: "clearColor"; type: "QColor" }
        Property { name: "isDepthTestDisabled"; type: "bool" }
        Property { name: "isDepthPrePassDisabled"; type: "bool" }
        Property { name: "aoStrength"; type: "float" }
        Property { name: "aoDistance"; type: "float" }
        Property { name: "aoSoftness"; type: "float" }
        Property { name: "aoDither"; type: "bool" }
        Property { name: "aoSampleRate"; type: "int" }
        Property { name: "aoBias"; type: "float" }
        Property { name: "shadowStrength"; type: "float" }
        Property { name: "shadowDistance"; type: "float" }
        Property { name: "shadowSoftness"; type: "float" }
        Property { name: "shadowBias"; type: "float" }
        Property { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "probeBrightness"; type: "float" }
        Property { name: "fastIBL"; type: "bool" }
        Property { name: "probeHorizon"; type: "float" }
        Property { name: "probeFieldOfView"; type: "float" }
        Property { name: "lightProbe2"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "probe2Fade"; type: "float" }
        Property { name: "probe2Window"; type: "float" }
        Property { name: "probe2Postion"; type: "float" }
        Signal {
            name: "progressiveAAModeChanged"
            Parameter { name: "progressiveAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        }
        Signal {
            name: "multisampleAAModeChanged"
            Parameter { name: "multisampleAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        }
        Signal {
            name: "temporalAAEnabledChanged"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Signal {
            name: "backgroundModeChanged"
            Parameter { name: "backgroundMode"; type: "QQuick3DEnvironmentBackgroundTypes" }
        }
        Signal {
            name: "clearColorChanged"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Signal {
            name: "aoStrengthChanged"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Signal {
            name: "aoDistanceChanged"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Signal {
            name: "aoSoftnessChanged"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Signal {
            name: "aoDitherChanged"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Signal {
            name: "aoSampleRateChanged"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Signal {
            name: "aoBiasChanged"
            Parameter { name: "aoBias"; type: "float" }
        }
        Signal {
            name: "shadowStrengthChanged"
            Parameter { name: "shadowStrength"; type: "float" }
        }
        Signal {
            name: "shadowDistanceChanged"
            Parameter { name: "shadowDistance"; type: "float" }
        }
        Signal {
            name: "shadowSoftnessChanged"
            Parameter { name: "shadowSoftness"; type: "float" }
        }
        Signal {
            name: "shadowBiasChanged"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Signal {
            name: "lightProbeChanged"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "probeBrightnessChanged"
            Parameter { name: "probeBrightness"; type: "float" }
        }
        Signal {
            name: "fastIBLChanged"
            Parameter { name: "fastIBL"; type: "bool" }
        }
        Signal {
            name: "probeHorizonChanged"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Signal {
            name: "probeFieldOfViewChanged"
            Parameter { name: "probeFieldOfView"; type: "float" }
        }
        Signal {
            name: "lightProbe2Changed"
            Parameter { name: "lightProbe2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "probe2FadeChanged"
            Parameter { name: "probe2Fade"; type: "float" }
        }
        Signal {
            name: "probe2WindowChanged"
            Parameter { name: "probe2Window"; type: "float" }
        }
        Signal {
            name: "probe2PostionChanged"
            Parameter { name: "probe2Postion"; type: "float" }
        }
        Signal {
            name: "isDepthTestDisabledChanged"
            Parameter { name: "isDepthTestDisabled"; type: "bool" }
        }
        Signal {
            name: "isDepthPrePassDisabledChanged"
            Parameter { name: "isDepthPrePassDisabled"; type: "bool" }
        }
        Method {
            name: "setProgressiveAAMode"
            Parameter { name: "progressiveAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        }
        Method {
            name: "setMultisampleAAMode"
            Parameter { name: "multisampleAAMode"; type: "QQuick3DEnvironmentAAModeValues" }
        }
        Method {
            name: "setTemporalAAEnabled"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Method {
            name: "setBackgroundMode"
            Parameter { name: "backgroundMode"; type: "QQuick3DEnvironmentBackgroundTypes" }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setAoStrength"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Method {
            name: "setAoDistance"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Method {
            name: "setAoSoftness"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Method {
            name: "setAoDither"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Method {
            name: "setAoSampleRate"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Method {
            name: "setAoBias"
            Parameter { name: "aoBias"; type: "float" }
        }
        Method {
            name: "setShadowStrength"
            Parameter { name: "shadowStrength"; type: "float" }
        }
        Method {
            name: "setShadowDistance"
            Parameter { name: "shadowDistance"; type: "float" }
        }
        Method {
            name: "setShadowSoftness"
            Parameter { name: "shadowSoftness"; type: "float" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setProbeBrightness"
            Parameter { name: "probeBrightness"; type: "float" }
        }
        Method {
            name: "setFastIBL"
            Parameter { name: "fastIBL"; type: "bool" }
        }
        Method {
            name: "setProbeHorizon"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Method {
            name: "setProbeFieldOfView"
            Parameter { name: "probeFieldOfView"; type: "float" }
        }
        Method {
            name: "setLightProbe2"
            Parameter { name: "lightProbe2"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setProbe2Fade"
            Parameter { name: "probe2Fade"; type: "float" }
        }
        Method {
            name: "setProbe2Window"
            Parameter { name: "probe2Window"; type: "float" }
        }
        Method {
            name: "setProbe2Postion"
            Parameter { name: "probe2Postion"; type: "float" }
        }
        Method {
            name: "setIsDepthTestDisabled"
            Parameter { name: "isDepthTestDisabled"; type: "bool" }
        }
        Method {
            name: "setIsDepthPrePassDisabled"
            Parameter { name: "isDepthPrePassDisabled"; type: "bool" }
        }
    }
    Component {
        name: "QQuick3DTexture"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Texture 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MappingMode"
            values: {
                "Normal": 0,
                "Environment": 1,
                "LightProbe": 2
            }
        }
        Enum {
            name: "TilingMode"
            values: {
                "Unknown": 0,
                "ClampToEdge": 1,
                "MirroredRepeat": 2,
                "Repeat": 3
            }
        }
        Enum {
            name: "Format"
            values: {
                "Automatic": 0,
                "R8": 1,
                "R16": 2,
                "R16F": 3,
                "R32I": 4,
                "R32UI": 5,
                "R32F": 6,
                "RG8": 7,
                "RGBA8": 8,
                "RGB8": 9,
                "SRGB8": 10,
                "SRGB8A8": 11,
                "RGB565": 12,
                "RGBA5551": 13,
                "Alpha8": 14,
                "Luminance8": 15,
                "Luminance16": 16,
                "LuminanceAlpha8": 17,
                "RGBA16F": 18,
                "RG16F": 19,
                "RG32F": 20,
                "RGB32F": 21,
                "RGBA32F": 22,
                "R11G11B10": 23,
                "RGB9E5": 24,
                "RGBA_DXT1": 25,
                "RGB_DXT1": 26,
                "RGBA_DXT3": 27,
                "RGBA_DXT5": 28,
                "Depth16": 29,
                "Depth24": 30,
                "Depth32": 31,
                "Depth24Stencil8": 32
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "scaleU"; type: "float" }
        Property { name: "scaleV"; type: "float" }
        Property { name: "mappingMode"; type: "MappingMode" }
        Property { name: "tilingModeHorizontal"; type: "TilingMode" }
        Property { name: "tilingModeVertical"; type: "TilingMode" }
        Property { name: "rotationUV"; type: "float" }
        Property { name: "positionU"; type: "float" }
        Property { name: "positionV"; type: "float" }
        Property { name: "pivotU"; type: "float" }
        Property { name: "pivotV"; type: "float" }
        Property { name: "format"; type: "Format" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "sourceItemChanged"
            Parameter { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "scaleUChanged"
            Parameter { name: "scaleU"; type: "float" }
        }
        Signal {
            name: "scaleVChanged"
            Parameter { name: "scaleV"; type: "float" }
        }
        Signal {
            name: "mappingModeChanged"
            Parameter { name: "mappingMode"; type: "MappingMode" }
        }
        Signal {
            name: "horizontalTilingChanged"
            Parameter { name: "tilingModeHorizontal"; type: "TilingMode" }
        }
        Signal {
            name: "verticalTilingChanged"
            Parameter { name: "tilingModeVertical"; type: "TilingMode" }
        }
        Signal {
            name: "rotationUVChanged"
            Parameter { name: "rotationUV"; type: "float" }
        }
        Signal {
            name: "positionUChanged"
            Parameter { name: "positionU"; type: "float" }
        }
        Signal {
            name: "positionVChanged"
            Parameter { name: "positionV"; type: "float" }
        }
        Signal {
            name: "pivotUChanged"
            Parameter { name: "pivotU"; type: "float" }
        }
        Signal {
            name: "pivotVChanged"
            Parameter { name: "pivotV"; type: "float" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "Format" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSourceItem"
            Parameter { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setScaleU"
            Parameter { name: "scaleU"; type: "float" }
        }
        Method {
            name: "setScaleV"
            Parameter { name: "scaleV"; type: "float" }
        }
        Method {
            name: "setMappingMode"
            Parameter { name: "mappingMode"; type: "MappingMode" }
        }
        Method {
            name: "setHorizontalTiling"
            Parameter { name: "tilingModeHorizontal"; type: "TilingMode" }
        }
        Method {
            name: "setVerticalTiling"
            Parameter { name: "tilingModeVertical"; type: "TilingMode" }
        }
        Method {
            name: "setRotationUV"
            Parameter { name: "rotationUV"; type: "float" }
        }
        Method {
            name: "setPositionU"
            Parameter { name: "positionU"; type: "float" }
        }
        Method {
            name: "setPositionV"
            Parameter { name: "positionV"; type: "float" }
        }
        Method {
            name: "setPivotU"
            Parameter { name: "pivotU"; type: "float" }
        }
        Method {
            name: "setPivotV"
            Parameter { name: "pivotV"; type: "float" }
        }
        Method {
            name: "setFormat"
            Parameter { name: "format"; type: "Format" }
        }
    }
    Component {
        name: "QQuick3DViewport"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtQuick3D/View3D 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QQuick3DViewportRenderMode"
            values: {
                "Texture": 0,
                "Underlay": 1,
                "Overlay": 2,
                "RenderNode": 3
            }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        Property { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        Property { name: "scene"; type: "QQuick3DNode"; isPointer: true }
        Property { name: "renderMode"; type: "QQuick3DViewportRenderMode" }
        Property { name: "enableWireframeMode"; type: "bool" }
        Signal {
            name: "cameraChanged"
            Parameter { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        }
        Signal {
            name: "environmentChanged"
            Parameter { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        }
        Signal {
            name: "sceneChanged"
            Parameter { name: "sceneRoot"; type: "QQuick3DNode"; isPointer: true }
        }
        Signal {
            name: "renderModeChanged"
            Parameter { name: "renderMode"; type: "QQuick3DViewportRenderMode" }
        }
        Signal {
            name: "enableWireframeModeChanged"
            Parameter { name: "enableWireframeMode"; type: "bool" }
        }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        }
        Method {
            name: "setEnvironment"
            Parameter { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        }
        Method {
            name: "setScene"
            Parameter { name: "sceneRoot"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setRenderMode"
            Parameter { name: "renderMode"; type: "QQuick3DViewportRenderMode" }
        }
        Method {
            name: "setEnableWireframeMode"
            Parameter { name: "enableWireframeMode"; type: "bool" }
        }
        Method {
            name: "worldToView"
            type: "QVector3D"
            Parameter { name: "worldPos"; type: "QVector3D" }
        }
        Method {
            name: "viewToWorld"
            type: "QVector3D"
            Parameter { name: "viewPos"; type: "QVector3D" }
        }
        Method {
            name: "pick"
            type: "QQuick3DPickResult"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
    }
}
